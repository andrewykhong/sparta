"SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc :c

:link(sws,https://sparta.github.io)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

custom command :h3

[Syntax:]

custom style action args ... action args ... :pre

style = {particle} or {grid} or {surf} :ulb,l
action = {create} or {remove} or {set} or {file} :l
  {create} args = cname datatype Nc
    cname = name of custom vector or array to create and initialize with zeroes
    datatype = {int} or {float} = for integer or floating point values
    Nc = 0 for a vector (single value), Nc >= 1 for an array (one or more values)
  {remove} arg2 = cname
    cname = name of custom vector or array to remove
  {set} args = cname v_name subset-ID region-ID
    cname = specify as name (no brackets) for custom vector with name
            or as name\[N\] for Nth column of custom array with name
    v_name = equal-, particle-, grid-, or surf-style variable with name
    subset-ID = mixture ID (particles) or group ID (grid cells or surf elements)
    region-ID = only apply to particle/grid/surf in region, NULL to not test
  {file} args = fname M cname1 cname2 ... cnameM
    fname = name of file with custom attributes for grid cells or surf elements
    M = # of custom values listed on each line of the file
    cname1,cname2,...,cnameM = which attribute each line's values are assigned to
      cnameI = name of a custom vector
      cnameI = name\[N\] for Nth column of a custom array with name
  {file/coarse} args = Nfile filestyle fname M cname1 cname2 ... cnameM
    Nfile = number of coarse files
    filestyle = {text} or {binary}
    fname = name of file with custom attributes for coarse grid cells
    M = # of custom values listed for each coarse cell entry in the file
    cname1,cname2,...,cnameM = which attribute each coarse cell's values are assigned to
      cnameI = name of a custom vector
      cnameI = name\[N\] for Nth column of a custom array with name :pre
:ule

[Examples:]

variable ivec particle id/100000
variable sdvec surf c_1*10+3.5
variable sdarray1 surf s_dvec+1
variable sdarray2 surf v_sdarray1+1 :pre

custom particle create ivec int 0 set ivec v_ivec air NULL
custom surf create sdvec float 0 set sdvec v_sdvec all NULL
custom surf create darray float 2 set darray\[1\] v_sdarray1 all NULL
custom surf set darray\[2\] v_sdarray2 all NULL
custom grid create gvec int 0 create garray float 2 file grid.attributes gvec garray[1] garray[2]
custom particle remove ivec
custom surf remove darray :pre

[Description:]

Create or remove or initialize/reset custom attributes for particles,
grid cells, or surface elements.

To create a new attribute, the {create} action is specified.  To
remove an attribute, the {remove} action is specified.  The {set}
action evaluates a variable to reset the values for an attribute.  The
{file} action reads a file with lines starting with a grid cell ID or
surface element ID followed by values for one or more per-grid or
per-surf attributes.  Particle-style attributes cannot be reset with
the {file} action.

Custom attributes can be vectors (single value per entity) or arrays
(mutiple values per entity).  They can also be integer or floating
point values.  See "Section 6.17"_Section_howto.html#howto_17 for an
explanation of custom attributes.

The {style} setting is {particle} or {grid} or {surf} for custom
per-particle, per-grid, or per-surf attributes.

The {action} setting is {create} or {remove} or {set} or {file} or
{file/coarse}.

The {create} action creates a new custom attribute called {cname} and
initializes all its values to zero.  The {datatype} is specified as
{int} or {float} and determines what kind of values the attribute
stores.  {Nc} is specified as 0 for custom vector which stores a
single value per entity.  Specify {Nc} >= 1 for a custom array which
stores Nc values per entity.

The {remove} action deletes the custom attribute called {cname},
whether it is a vector or array.

The {set} and {file} and {file/coarse} actions reset the values of
custom attribute(s) which must already exist.

:line

The {set} action resets the values of a custom attribute by evaluating
a variable.  To operate on a custom vector, {cname} is simply the name
of the vector.  To operate on a single column of a custom array,
{cname} is specified as name\[N\] for the Nth column of a custom array
with name.

The specified {v_name} is the name of the variable which is evaluated.
It must be either an equal-style or particle-style or grid-style or
surf-style variable.  All of these define a mathematical formula which
is used to compute the value(s) of the variable.  See the
"variable"_variable.html command for details.

If an equal-style variable is specified, it produces a single value
which will be assigned as the custom value to all the particles or
grid cells or surface elements (see subset-ID and region-ID discussion
below).  Otherwise a particle-style variable must be used for {style
particle}, a grid-style variable for {style grid}, or a surf-style
variable for {style surf}.  When it is evaluated it generates one
value for each particle, grid cell, or surface element, which is
assigned to the custom vector or to a column of the custom array.

Note that the latter 3 variable styles can include outputs from
"compute"_compute.html or "fix"_fix.html commands.  They can also
include the current timestep (as can equal-style variables) or the
spatial position of a particle, grid cell, or surface element in their
formula.  So it is easy to calculate a value for each entity which
varies in time or spatially.

The next two arguments, {subset-ID} and {region-ID}, can limit which
particles, grid cells, or surface elements are assigned a custom
value.  An individual particle, grid cell, or surface element must
meet both criteria to have its custom value set, otherwise its value
is unchanged.

The {subset-ID} is the ID of a mixture for particles or the ID of a
group of grid cells or surface elements.  Only particles in the
mixture or grid cells/surface elements in the group will be assigned a
value.  See the "mixture"_mixture.html and "group"_group.html commands
for more details.  Note that "all" is a pre-defined mixture ID which
contains all particles.  Likewise "all" is the name of a pre-defined
group with all grid cells or all surface elements.

The {region-ID} is the ID of a geometric region defined by the
"region"_region.html command.  Only particles or grid cells or surface
elements in the region will have their values set.  The center point
of a grid cell or surface element is used for the region check.  If
{region-ID} is specified as NULL, then the region criterion is not
applied.

:line

The {file} action resets the values of one or more custom attributes
by reading them from the {fname} file.  It can only be used with
{style grid} or {style surf}, not with {style particle}.

The specified (M) number of {cname1,cname2,...,cnameM} arguments must
match the number of values listed on each line in the file.  A
{cnameI} with no brackets is the name of a custom vector.  For a
custom array, {cnameI} must be of the form name\[N\] for the Nth
column of the array.

The format of the file is as follows.  Note that the number of grid
cells or surf elements specified in the file does not have to equal
the total number of grid cells or surface elements.  If the ID of a
grid cell or surface element does not appear in the file, then its
custom attribute value(s) will be unchanged.

The file can start with any number of comment or blank lines.
A comment line starts with the "#" character.

The first non-comment, non-blank line must be an integer count N of
the number of attribute value lines which follow in the file.  These N
lines must immediately follow the count line and contain no blank
lines.  Any remaining lines in the file are ignored.

The format of each attribute value line is as follows:

ID value1 value2 ... valueM

ID is the integer ID of the grid cell or surface element.  Note that
for hierarchial grids, it must be the integer form of the ID, not the
string form (possibly with dashes).  M values follow, corresponding to
the {M} argument in the input script, following the {fname} argument.

The following is an example of a correctly formatted file to set the
values for a per-surf custom array with 2 columns.  Only the values
for 3 surface elements are set.

# custom values for a few surface elements
# calculated for test problem XYZ :pre

3
1 10.0 5.0
20 12.0 6.5
21 8.0 4.55 :pre

This file could be read with an input script command like this:

custom surf create darray float 2 file file.surf 2 darray\[1\] darray\[2\] :pre

:line

The {file/coarse} action resets the values of one or more custom
attributes by reading them from one or more files.  It can only be
used with {style grid}, not with {style surf} or {style particle}.

IMPORTANT NOTE: The file/coarse action has NOT yet been implemented
for this command.

This action is designed to allow input of custom values for a handful
of "coarse" cells.  The values for each coarse cell are assigned to
multiple smaller SPARTA grid cells.  The coarse cells could be from
another code, such as a continuum Navier-Stokes (NS) code.  This
operation allows the solution from the NS code to be be mapped to the
SPARTA grid.

Creation of the file(s) used by this action is a pre-processing step,
which in the NS context could calculates which SPARTA grid cells to
assign to each coarse grid cell, based on the geometry of the two
grids.  The "create_particles"_create_particles.html command could be
used with its custom options to create particles with properties that
match the NS solution.  Using this action with the "fix
custom"_fix_custom.html command could assign per-grid custom values
based on different time snapshots from the NS code.

The {Nfile} argument is the number of files to read.  If {Nfile} > 1,
then the specified {fname} must contain a a wildcard "%" character
which is replaced by the numbers from 1 to Nfile to generate each
filename.  For example, if {Nfile} = 3 and {fname} is specified as
surf.%.attribute, then files surf.1.attribute, surf.2.attribute,
surf.3.attribute, etc will be read.  Note that if the "fix
custom"_fix_custom.html command uses this action, and there are also
multiple coarse files for each of the different timesteps , then the
specified {fname} must contain both wildcard "%" and "*" characters.

The specified (M) number of {cname1,cname2,...,cnameM} arguments must
match the number of values listed for each coarse cell entry in each
file.  A {cnameI} with no brackets is the name of a custom vector.
For a custom array, {cnameI} must be of the form name\[N\] for the Nth
column of the array.

The reason to use multiple files is a single file would be extremely
large and/or to enable more parallelism by having different processors
read different files simultaneously.  Conceptually, the information being
read is the union of the information from all the individual files.

As explained below, for each coarse cell entry, one of more SPARTA
grid cell IDs is specified.  The custom values for the coarse cell are
assigned to each of the SPARTA grid cells.  The union of all the
SPARTA grid cell IDs (from all the files) should have no duplicates.
But the union does not have to equal the total number of SPARTA grid
cells.  If the ID of a SPARTA grid cell does not appear in any of the
files, then its custom attribute value(s) will be unchanged.

The format of each {text} file is as follows.  One of more of these
files should be written by the pre-processing code in text (ASCII)
format.

It can start with any number of comment or blank lines.  A comment
line starts with the "#" character.

The first non-comment, non-blank line must be an integer count Nentry
of the number of coarse cell entries which follow in this file.  The
entries must immediately follow the count line and contain no blank
lines.  Any remaining lines in the file are ignored.

The format of each coarse cell entry is as follows:

coarse-ID Ncells value1 value2 ... valueM
cell1-ID cell2-ID ... (10 per line until complete, last line may have fewer)

On the first line, the coarse-ID is simply an index for the coarse
cell entry.  It may be convenient for indexing the coarse grid cells
from another code.  Or for indexing the entries across multiple coarse
files.  SPARTA ignores this index value.

Ncells is the count of SPARTA grid cells which are mapped to this
coarse cell entry.  Conceptually, it could be the list of SPARTA grid
cells whose center points fall inside the coarse grid cell from
another code.

M values follow, corresponding to the {M} argument in the input
script, following the {fname} argument.

The next line(s) list the {Ncell} SPARTA grid cell IDs.  If {Ncell} >
10, list 10 per line.  The last line contains from 1 to 10 grid cell
IDs.  Note that for hierarchial grids, each grid cell ID must be the
integer form of the ID, not the string form (possibly with dashes).

The following is an example of a correctly formatted file to set the
values for a per-grid custom array with 2 columns.  Only the
values for 30 SPARTA grid cells are set (6+6+18).

# custom values for a few Navier-Stokes elements
# calculated for test problem XYZ :pre

3
1 6 10.0 5.0
  2 4 6 8 10 12
2 6 12.0 6.5
  1 3 5 7 9 11
3 18 8.0 4.55
  13 14 15 16 17 18 19 20 21 22
  23 24 25 26 27 28 29 30 :pre

This file could be read with an input script command like either of these:

custom surf create darray float 2 file/coarse 1 text file.surf 2 darray\[1\] darray\[2\]
custom surf create darray float 2 file/coarse 3 text file.surf.% 2 darray\[1\] darray\[2\] :pre

The latter command assumes there are 2 other files like this one, with
names file.surf.1, file.surf.2, and file.surf.3.

The format of each {binary} file is as follows.  One of more of these
files should be written by the pre-processing code in binary format.

precision of grid-cell IDs (4-byte integer)
Nentry (4-byte integer)
entry-ID for entry # 1 (4-byte integer)
Ncell (4-byte integer)
M custom values (8-byte doubles)
Ncell grid-IDs (4- or 8-byte integers)
...
entry-ID for entry # Nentry (4-byte integer)
Ncell (4-byte integer)
M custom values (8-byte doubles)
Ncell grid-IDs (4- or 8-byte integers) :pre

The precision is the number 32 or 64 and depends on the precision the
SPARTA executable is using to store its grid cell IDs.  If SPARTA was
compiled with the SPARTA_BIG setting (default), then precision = 32
for 32-bit grid cell IDs.  If SPARTA was compiled with the
SPARTA_BIGBIG setting, then precision = 64 for 64-bit grid cell IDs.

Nentry refers to the number of coarse cell entries in this file.

The double for custom values refers to an 8-byte floating point value.
If the corresponding custom attribute in SPARTA is of type {int}, then
the floating point value read from the file will be truncated to an
integer.  E.g. 12.0 --> 12, 12.3 --> 12.

The 4 lines listed above as entry-ID, Ncell, M custom values, Ncell
grid-IDs are repeated Nentry times in the binary file.

:line

[Restrictions:] none

[Related commands:]

"fix custom"_fix_custom.html, "mixture"_mixture.html,
"group"_group.html, "region"_region.html

[Default:] none
